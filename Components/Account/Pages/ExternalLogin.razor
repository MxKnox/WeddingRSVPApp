@page "/Account/ExternalLogin"
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using WeddingApp.Extensions
@using WeddingApp.Identity

@inject SignInManager<WeddingAppUser> SignInManager
@inject UserManager<WeddingAppUser> UserManager
@inject IUserStore<WeddingAppUser> UserStore
@inject IEmailSender<WeddingAppUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject WeddingDbContext DbContext

<PageTitle>Register</PageTitle>

<StatusMessage Message="@message"/>
@* <h1>Register</h1> *@
@* <h2>Associate your @ProviderDisplayName account.</h2> *@
@* <hr/> *@
@* *@
@* <div class="alert alert-info"> *@
@*     You've successfully authenticated with <strong>@ProviderDisplayName</strong>. *@
@*     Please enter an email address for this site below and click the Register button to finish *@
@*     logging in. *@
@* </div> *@
@* *@
@* <div class="row"> *@
@*     <div class="col-md-4"> *@
@*         <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post"> *@
@*             <DataAnnotationsValidator/> *@
@*             <ValidationSummary class="text-danger" role="alert"/> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email."/> *@
@*                 <label for="Input.Email" class="form-label">Email</label> *@
@*                 <ValidationMessage For="() => Input.Email"/> *@
@*             </div> *@
@*             <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button> *@
@*         </EditForm> *@
@*     </div> *@
@* </div> *@

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo? externalLoginInfo;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        if (externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }
        var email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        var name = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Name) ?? "";
        
        var user = await UserManager.FindByLoginAsync(externalLoginInfo.LoginProvider, externalLoginInfo.ProviderKey);
        if (user != null)
        {
            // update Name value from claim
            user.Name = name;
            await UserManager.UpdateAsync(user);
        }
        else
        {
            // try find account from email on external identity
            user = await UserManager.FindByEmailAsync(email);
            if (user == null)
            {
                //Create an unprivileged user for this identity
                user = new WeddingAppUser()
                {
                    UserName = email,
                    Email = email,
                    Name = name,
                    EmailConfirmed = true // trust value passed from idp
                };

                await UserManager.CreateAsync(user);
            }
            
            await UserManager.AddLoginAsync(user, externalLoginInfo);
        }

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            true,
            true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            
            await CheckReservation(user);
            
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        RedirectManager.RedirectToWithStatus("Account/Login", "No matching email found.", HttpContext);
    }

    private async Task CheckReservation(WeddingAppUser user)
    {
        // Try find Guest entry for that email
        var reservationPerson = await DbContext.ReservationPeople.FirstOrDefaultAsync(rp => rp.UserId == user.Id);
        
        // find a reservation to attach to this user.
        if (reservationPerson == null)
        {
            var emailFromProvider = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
            var nameFromProvider = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Name) ?? "";

            // find any exact matches not yet assigned.
            reservationPerson = await DbContext.ReservationPeople.FirstOrDefaultAsync(rp =>
                rp.UserId == null
                && (rp.Email == emailFromProvider || rp.Name == nameFromProvider)
            );
            
            // try fuzzy find using levenshtein if not found still
            if (reservationPerson == null)
            {
                var unassignedPersons = await DbContext.ReservationPeople
                    .Where(rp => rp.UserId == null)
                    .ToListAsync();

                var closestMatch = unassignedPersons.Select(rp => new
                    {
                        reservationPerson = rp,
                        distance = rp.Name.LevenshteinDistance(nameFromProvider),
                        similarity = 1.0 - (double)rp.Name.LevenshteinDistance(nameFromProvider) /
                            Math.Max(nameFromProvider.Length, rp.Name.Length)
                    })
                    .Where(x => x.similarity > 0.6) // 60% similarity threshold
                    .OrderByDescending(x => x.similarity)
                    .FirstOrDefault();

                if (closestMatch == null)
                {
                    // still null, send them to the rsvp page so they can open a reservation and associate it with their user
                    RedirectManager.RedirectTo($"rsvp");
                }

                reservationPerson = closestMatch.reservationPerson;
            }
            
            // Have identified an unmatched reservationPerson, attach it and add the user to the Guests role
            reservationPerson.UserId = user.Id;
            await DbContext.SaveChangesAsync();
            
            // Add the user to the guest role
            await UserManager.AddToRoleAsync(user, nameof(Roles.Guest));
        }
        
        var reservation = DbContext.Reservations.FirstOrDefault(r => r.Id == reservationPerson.ReservationId);

        if (reservation == null)
        {
            RedirectManager.RedirectTo(String.IsNullOrWhiteSpace(ReturnUrl) ? "/rsvp" : ReturnUrl );
        }
        
        // reservationPerson should not be null here anymore.
        RedirectManager.RedirectTo($"rsvp/{reservation.RegistrationToken}");
    }
    

}