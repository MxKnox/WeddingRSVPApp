@using Microsoft.AspNetCore.Authentication
@using WeddingApp.Identity
@inject SignInManager<WeddingAppUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<div class="glass-card" style="align-content: center">
    @if (externalLogins.Length == 0)
    {
        <div>
            <p>
                There are no external authentication services configured. See this
                <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                    article
                    about setting up this ASP.NET application to support logging in via external services
                </a>.
            </p>
        </div>
    }
    else
    {
        <form class="form-horizontal text-center" style="align-content: center" action="Account/PerformExternalLogin"
              method="post">
            <div style="display: inline-flex;">
                <AntiforgeryToken/>
                <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
                @foreach (var p in externalLogins)
                {
                    <div style="display: block; padding: 10px;">
                        <button type="submit" class="externalLoginService socialLoginButton @p.DisplayName"
                                name="provider" value="@p.Name"
                                title="Log in using your @p.DisplayName account"></button>
                        <p class="text-center">@p.DisplayName</p>
                    </div>
                }
            </div>
        </form>
    }
</div>

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

}