@* Pages/RSVP/Details.razor *@
@page "/rsvp/{RegistrationToken}"
@rendermode InteractiveServer
@inject WeddingDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject IOptions<WeddingOptions> WeddingOptions;
@using System.Net
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using WeddingApp.Data.Reservations
@using WeddingApp.Options
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager;

<PageTitle>RSVP - @RegistrationToken</PageTitle>

<div class="animate-fade-in">
    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner"></div>
        </div>
    }
    else if (Reservation == null)
    {
        <div class="glass-card text-center">
            <h3>Reservation Not Found</h3>
            <p>The registration code "@RegistrationToken" was not found.</p>
            <a href="/rsvp" class="btn btn-primary mt-3">Go Back</a>
        </div>
    }
    else if (!HasAccess)
    {
        <div class="glass-card text-center">
            <h3>Access Denied</h3>
            <p>You don't have permission to view this reservation.</p>
            <a href="/rsvp" class="btn btn-primary mt-3">Go Back</a>
        </div>
    }
    else
    {
        <h2 class="text-center script-text mb-2 mt-2">RSVP</h2>
        <div class="glass-card mb-3">
            <p class="text-center" style="color: var(--dark-gray);">
                Registration Code: <strong>@RegistrationToken</strong>
            </p>
        </div>

        <!-- RSVP Status -->
        <div class="glass-card mb-3">
            <h3>Will you be attending?</h3>
            <div style="display: flex; gap: var(--space-md); margin-top: var(--space-lg);">
                <button class="btn @(Reservation.Status != ReservationStatus.Confirmed ? "btn-ghost" : "btn-secondary")"
                        @onclick="() => UpdateAttendance(true)"
                        disabled="@(!CanEdit)">
                    ✓ Yes, I'll be there!
                </button>
                <button
                    class="btn @(Reservation.Status != ReservationStatus.NotAttending ? "btn-danger-ghost" : "btn-danger")"
                    @onclick="() => UpdateAttendance(false)"
                    disabled="@(!CanEdit)">
                    ✗ Sorry, can't make it
                </button>
            </div>
        </div>


        <!-- Guest List -->
        <div class="glass-card mb-3">
            <div
                style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-lg);">
                <h3>Guest Information</h3>
                @if (CanEdit && Reservation.People.Count < Reservation.MaxGuests)
                {
                    <button class="btn btn-primary btn-sm" @onclick="AddGuest">+ Add Guest</button>
                }
            </div>

            <div class="tile-container">
                @foreach (var person in Reservation.People)
                {
                    <div class="tile">
                        @if (EditingPersonId == person.Id)
                        {
                            <!-- Edit Mode -->

                            <div class="form-group">
                                <input type="text" class="form-input" disabled="@(person.UserId != null)" @bind="EditPerson.Name"/>
                                <label class="form-label">@((person.UserId == null) ? "Name" : "Name (from login)")</label>
                            </div>
                            
                            @if (person.UserId != null)
                            {
                                <div class="form-group">
                                    <input type="text" class="form-input" @bind="EditPerson.PreferredName"/>
                                    <label class="form-label">Preferred Name</label>
                                </div>
                            }
                            
                            <div class="form-group">
                                <input type="email" class="form-input" disabled="@(person.UserId != null)"
                                       @bind="EditPerson.Email"/>
                                <label class="form-label">@((person.UserId == null) ? "Email" : "Email (from login)")</label>
                            </div>
                            <div class="form-group">
                                <InputCheckbox @bind-Value=EditPerson.Over18></InputCheckbox>
                                <label class="form-label">Over 18</label>
                            </div>
                            <div class="form-group">
                                <InputCheckbox @bind-Value=EditPerson.DietaryRequirements></InputCheckbox>
                                <label class="form-label">Dietary Requirements?</label>
                            </div>
                            @if (@EditPerson.DietaryRequirements)
                            {
                                <div class="form-group">
                                    <InputTextArea class="form-input form-textarea"
                                                   @bind-Value="EditPerson.DietaryRequirementsDescription">

                                    </InputTextArea>
                                    <label class="form-label">Dietary Requirements</label>
                                </div>
                            }

                            <div style="display: flex; gap: var(--space-md); justify-content: center;">
                                <button style="flex: 1" class="btn btn-secondary btn-sm"
                                        @onclick="() => UpdatePerson(person)">Save
                                </button>
                                <button style="flex: 1" class="btn btn-danger btn-sm" @onclick="CancelEdit">Cancel
                                </button>
                            </div>
                        }
                        else
                        {
                            <!-- Display Mode -->
                            <div class="tile-header">
                                @person.Name
                                @if (person.IsPrimaryGuest)
                                {
                                    <span class="tag tag-primary" style="margin-left: var(--space-sm);">Primary</span>
                                }
                            </div>
                            <div class="tile-content">

                                <div class="form-group">
                                    <InputCheckbox @bind-Value=person.Over18
                                                   @bind-Value:after="() => SavePerson(person)"></InputCheckbox>
                                    <label class="form-label">Over 18</label>
                                </div>
                                <div class="form-group">
                                    <InputCheckbox @bind-Value=person.DietaryRequirements
                                                   @bind-Value:after="() => SavePerson(person)"></InputCheckbox>
                                    <label class="form-label">Dietary Requirements?</label>
                                </div>
                                @if (@person.DietaryRequirements)
                                {
                                    <div class="form-group">
                                        <InputTextArea class="form-input form-textarea"
                                                       @bind-Value:after="() => SavePerson(person)"
                                                       @bind-Value="person.DietaryRequirementsDescription">

                                        </InputTextArea>
                                        <label class="form-label">Dietary Requirements</label>
                                    </div>
                                }
                            </div>
                            @if (CanEdit)
                            {
                                <div style="display: flex; gap: var(--space-md); justify-content: center;">
                                    <button style="flex: 1" class="btn btn-primary btn-sm"
                                            @onclick="() => EditGuest(person)">Edit
                                    </button>
                                    @if (!person.IsPrimaryGuest)
                                    {
                                        <button style="flex: 1" class="btn btn-danger btn-sm"
                                                @onclick="() => ConfirmDeleteGuest(person)">Remove
                                        </button>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>

        @if (!IsAuthenticated)
        {
            <!-- Prompt to create account -->
            <div class="glass-card text-center">
                <h3>Save Your RSVP</h3>
                <p>Create an account to access the gift registry and photo sharing!</p>
                @{
                    var returnUrl = $"/account/Register?returnUrl={WebUtility.UrlEncode(NavigationManager.ToBaseRelativePath(NavigationManager.Uri))}";

                    <a href="@returnUrl" class="btn btn-primary mt-2">Create Account</a>
                }
            </div>
        }
    }
</div>

<!-- Native Blazor Confirmation Dialog -->
@if (showConfirmationDialog)
{
    <div
        style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;">
        <div class="glass-card animate-fade-in" style="width: 90%; max-width: 400px; text-align: center;">
            <h4 style="color: var(--primary); font-family: var(--font-display); margin-bottom: var(--space-lg);">@confirmationTitle</h4>
            <p style="color: var(--dark-gray); margin-bottom: var(--space-xl);">@confirmationMessage</p>
            <div style="display: flex; gap: var(--space-md); justify-content: center;">
                <button style="flex: 1" class="btn btn-ghost" @onclick="() => ConfirmAction(false)">Cancel</button>
                <button style="flex: 1" class="btn btn-danger"
                        @onclick="() => ConfirmAction(true)">@confirmationAction</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string RegistrationToken { get; set; } = "";

    private bool IsLoading = true;
    private bool IsAuthenticated;
    private bool IsAdminOrPlanner;
    private bool HasAccess;
    private bool CanEdit;
    private string? UserId;
    private Reservation? Reservation;
    private Guid? EditingPersonId;
    private ReservationPerson EditPerson = new();

    // Native Blazor Confirmation Dialog
    private bool showConfirmationDialog = false;
    private string confirmationTitle = "";
    private string confirmationMessage = "";
    private string confirmationAction = "";
    private TaskCompletionSource<bool>? confirmationTaskCompletionSource;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        UserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        IsAdminOrPlanner = authState.User.IsInRole("Admin") || authState.User.IsInRole("Planner");

        await LoadReservation();
    }

    private async Task LoadReservation()
    {
        Reservation = await DbContext.Reservations
            .Include(r => r.People)
            .FirstOrDefaultAsync(r => r.RegistrationToken == RegistrationToken);

        if (Reservation != null)
        {
            if (!IsAuthenticated)
            {
                HasAccess = true; // Anonymous users can view with token
                CanEdit = true;
            }
            else if (IsAdminOrPlanner)
            {
                HasAccess = true;
                CanEdit = true;
            }
            else if (!string.IsNullOrEmpty(UserId))
            {
                HasAccess = Reservation.People.Any(p => p.UserId == UserId);
                CanEdit = HasAccess;
            }
        }

        IsLoading = false;
    }

    private async Task UpdateAttendance(bool isAttending)
    {
        if (Reservation != null && CanEdit)
        {
            Reservation.Status = isAttending ? ReservationStatus.Confirmed : ReservationStatus.NotAttending;
            await DbContext.SaveChangesAsync();
        }
    }

    private void AddGuest()
    {
        if (Reservation != null && Reservation.People.Count < Reservation.MaxGuests)
        {
            var newPerson = new ReservationPerson
            {
                ReservationId = Reservation.Id,
                Name = "New Guest",
                IsPrimaryGuest = false
            };

            Reservation.People.Add(newPerson);
            EditGuest(newPerson);
        }
    }

    private void EditGuest(ReservationPerson person)
    {
        EditingPersonId = person.Id;
        EditPerson = new ReservationPerson
        {
            Name = person.Name,
            Email = person.Email,
            Phone = person.Phone,
            Address = person.Address,
            DietaryRequirements = person.DietaryRequirements
        };
    }

    private async Task SavePerson(ReservationPerson person)
    {
        DbContext.ReservationPeople.Update(person);
        await DbContext.SaveChangesAsync();
    }

    private async Task UpdatePerson(ReservationPerson person)
    {
        person.Name = EditPerson.Name;
        person.Email = EditPerson.Email;
        person.Phone = EditPerson.Phone;
        person.Address = EditPerson.Address;
        person.DietaryRequirements = EditPerson.DietaryRequirements;

        if (DbContext.ReservationPeople.Any(rp => rp.Id == person.Id))
        {
            DbContext.ReservationPeople.Update(person);
        }
        else
        {
            DbContext.ReservationPeople.Add(person);
        }

        await DbContext.SaveChangesAsync();

// TODO: Send invitation email if needed
        CancelEdit();
    }

    private async Task CancelEdit()
    {
        var exists = await DbContext.ReservationPeople.AnyAsync(rp => rp.Id == EditingPersonId);
        if (!exists)
        {
            // remove from the array
            Reservation.People = Reservation.People.Where(rp => rp.Id != EditingPersonId).ToList();
        }

        EditingPersonId = null;
        EditPerson = new ReservationPerson();
    }

    private async Task RemoveGuest(ReservationPerson person)
    {
        if (Reservation != null && !person.IsPrimaryGuest)
        {
            Reservation.People.Remove(person);
            DbContext.ReservationPeople.Remove(person);
            await DbContext.SaveChangesAsync();
        }
    }

    // Native Blazor Confirmation Dialog Methods
    private async Task ConfirmDeleteGuest(ReservationPerson person)
    {
        var confirmed = await ShowConfirmationAsync(
            "Confirm Delete",
            $"Are you sure you want to delete the guest '{person.Name}'? This action cannot be undone.",
            "Delete"
        );

        if (confirmed)
        {
            await RemoveGuest(person);
        }
    }

    private async Task<bool> ShowConfirmationAsync(string title, string message, string actionText)
    {
        confirmationTitle = title;
        confirmationMessage = message;
        confirmationAction = actionText;
        showConfirmationDialog = true;

        confirmationTaskCompletionSource = new TaskCompletionSource<bool>();
        StateHasChanged();

        return await confirmationTaskCompletionSource.Task;
    }

    private void ConfirmAction(bool confirmed)
    {
        showConfirmationDialog = false;
        confirmationTaskCompletionSource?.SetResult(confirmed);
        confirmationTaskCompletionSource = null;
        StateHasChanged();
    }

}